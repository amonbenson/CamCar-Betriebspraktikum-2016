import thread
import sys
import socket
import time

class EV3:
	inPorts = ('in1', 'in2', 'in3', 'in4')
	outPorts = ('outA', 'outB', 'outC', 'outD')

	def __init__(self, ip):
		# Create the socket
		self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

		# reuse the address and bind the socket to the port
		ev3_address = (ip, 10000)
		self.sock.connect(ev3_address)
		print('Connected to EV3')

		# Create the input data
		self.sensorData = ['', '', '', '']

		# Create the input thread
		thread.start_new_thread(self.handleInput, ())

	def handleInput(self):
		try:
			while 1:
				# Wait for a message
				data = self.sock.recv(256)
				commands = data.split('\n')
				for command in commands:
					self.handleInputCommand(command)
		finally:
                        self.sock.close()

	def handleInputCommand(self, command):
		# Return if there's no command
		if not command: return

		# Read the command
		args = command.split(' ')

                # There must be at least two arguments
                if len(args) != 2:
                        print('invalid format ({})'.format(command))
                        return

                # Read the port and data arguments
                port = args[0]
                sensData = args[1]

                # The first argument must be a sensor port
                if port not in self.inPorts:
                        print('{} is not a sensor port.'.format(port))
                        return

                # Store the second argument in the sensor data
                portNum = int(port[-1])
                self.sensorData[portNum] = sensData

	def readSensor(self, port):
		# Return if the port has an ivalid format
		if port not in self.inPorts:
			print('{} is not a sensor port.'.format(port))
			return

		portNum = int(port[-1])
		return self.sensorData[portNum]

	def runMotor(self, port, speed):
		# Return if the port has an invalid format
		if port not in self.outPorts:
			print('{} is not a motor port.'.format(port))
			return

		# Send the command to run the motor
		if self.sock:
			self.sock.send('{} {}'.format(port, speed))

	def stopMotor(self, port):
		# Simply runs the motor with a speed of 0
		self.runMotor(port, 0)


# Test the ev3
if (__name__ == '__main__'):
	ev3 = EV3('192.168.1.107')
	
	ev3.runMotor('outD', 50)
	time.sleep(.2)
	ev3.stopMotor('outD')
	ev3.runMotor('outC', 50)
        time.sleep(.2)
        ev3.stopMotor('outC')
	while 1:
		print ev3.readSensor('in2')
