#!/bin/python
#
# CamCar.py is a simple receiver program that decodes a protocoll
# to transmit ev3 motor and sensor data. It will translate the
# commands to the sensors / motors and directly controls them
#
# The Raspberry can send these commands:
#
# mot <port> <speed>        This will turn the motor at the specific port
#                           (outA, outB, outC or outD). The speed is an
#                           Integer value from -100 to 100 (negative speed
#                           means backwards rotation)
#
# The EV3 can send these commands
#
# sns <port> <data>         This will transmit the raw values from the
#                           sensors at the specific port (in1, in2, in3
#                           or in4). The data can be any value depending
#                           on the type of the connected sensor
#
# author: Amon Benson



# Do the imports
import thread
import sys, traceback
import socket
from ev3dev.core import *


# This will be called by a thread and checks for incoming messages (that the
# Raspberry Pi sends).
def handleInput(sock):
    try:
        while 1:
            # Wait for a message
            data = sock.recv(256)
            if not data: raise EOFError('No more data')
            commands = data.split('\n')
            for command in commands:
                handleInputCommand(command)
    except:
        print('Socket connection failed!')
        traceback.print_exc(file=sys.stdout)
        sock.close()


# This will check one single command (the Raspberry may send multiple commands
# at once so the handleInput() has to separate them and this method separates
# the single arguments.
def handleInputCommand(command):
    # Get the single arguments
    args = command.split(' ')

    # Get the type of command (the first argument)
    if args[0] == 'mot':
        motorCommand(args)
    else:
        print('Unknown command: ' + args[0])


# This runs a motor by the given arguments (note that args[0] is not used
# because it already defines the type of command @see handleInputCommand).
def motorCommand(args):
    port = args[1]
    speed = args[2]

    if port == 'outA' and motA is not None:
        motA.run_forever(duty_cycle_sp=speed)
    if port == 'outB' and motB is not None:
        motB.run_forever(duty_cycle_sp=speed)
    if port == 'outC' and motC is not None:
        motC.run_forever(duty_cycle_sp=speed)
    if port == 'outD' and motD is not None:
        motD.run_forever(duty_cycle_sp=speed)


# This sends the sensor data to all connected sockets
def sendSensorData(sock):
    if sns1 is not None:
        sock.send('sns in1 ' + str(sns1.value()))
    if sns2 is not None:
        sock.send('sns in2 ' + str(sns2.value()))
    if sns3 is not None:
        sock.send('sns in3 ' + str(sns3.value()))
    if sns4 is not None:
        sock.send(getSensorData('in4', )


# Returns the sensor data. If there are multiple values the will be devided
# by a %.
def getSensorData(port, sns):
    data = 'sns ' + port + ' '
    if type(sns) == TouchSensor:
        data += str(sns.value())
    if type(sns) == ColorSensor:
        data += str(sns.red()) + '%' + str(sns.green()) + '%' + str(sns.blue())
    if type(sns) == UltrasonicSensor:
        data += str(sns.distance_centimeters())
    if type(sns) == GyroSensor:
        data += str(sns.angle()) + '%' + str(sns.rate())



# STart the main script
print('Initializing...')

# Create a socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Create a local server
server_address = ('0.0.0.0', 10000)
sock.bind(server_address)
sock.listen(5)

# Create the motors and sensors
motA = LargeMotor('outA')
motB = LargeMotor('outB')
motC = MediumMotor('outC')
motD = None
sns1 = None
sns2 = None
sns3 = ColorSensor('in3')
sns4 = ColorSensor('in4')



# Wait for a client to connect
while 1:
    try:
        print('Waiting for a connection...')
        clientSock, address = sock.accept()
        print('Connected to Raspberry Pi (' + str(address) + ')')

        # Create the input thread
        thread.start_new_thread(handleInput, (clientSock,))

        # Constantly send the sensor data
        sendSensorData(clientSock)

    except Exception:
        print('Socket connection failed!')
        traceback.print_exc(file=sys.stdout)
